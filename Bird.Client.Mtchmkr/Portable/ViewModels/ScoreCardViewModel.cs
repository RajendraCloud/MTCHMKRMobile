using System;using System.Collections.ObjectModel;using System.Linq;using System.Threading.Tasks;using System.Windows.Input;using Bird.Client.Mtchmkr.Business.Common;using Bird.Client.Mtchmkr.Business.ServiceCenter.Response;using Bird.Client.Mtchmkr.Portable.Interfaces;using Telerik.Windows.Documents.Spreadsheet.Expressions.Functions;
using Xamarin.Essentials;using Xamarin.Forms;namespace Bird.Client.Mtchmkr.Portable.ViewModels{    public class ScoreCardViewModel : BaseViewModel    {        private readonly IProgressDialog _progDialog;        private readonly PendingMatchResponse _matchData;        private ObservableCollection<PlayerDTO> playersItemsSource;        public ObservableCollection<PlayerDTO> PlayersItemsSource        {            get            {                return playersItemsSource;            }            set            {                playersItemsSource = value;                OnPropertyChanged();            }        }        private PlayerDTO playerOne = new PlayerDTO();        public PlayerDTO PlayerOne        {            get            {                return playerOne;            }            set            {                playerOne = value;                OnPropertyChanged();            }        }        private string playerOneName;        public string PlayerOneName        {            get            {                return playerOneName;            }            set            {                playerOneName = value;                OnPropertyChanged();            }        }        private PlayerDTO playerTwo = new PlayerDTO();        public PlayerDTO PlayerTwo        {            get            {                return playerTwo;            }            set            {                playerTwo = value;                OnPropertyChanged();            }        }        private string playerTwoName;        public string PlayerTwoName        {            get            {                return playerTwoName;            }            set            {                playerTwoName = value;                OnPropertyChanged();            }        }        private bool isNoDataView = false;        public bool IsNoDataView        {            get            {                return isNoDataView;            }            set            {                isNoDataView = value;                OnPropertyChanged();            }        }        private bool isScoreCardView = false;        public bool IsScoreCardView        {            get            {                return isScoreCardView;            }            set            {                isScoreCardView = value;                OnPropertyChanged();            }        }        private int maxFrame;        public int MaxFrame        {            get            {                return maxFrame;            }            set            {                maxFrame = value;                OnPropertyChanged();            }        }        private int completedFrame;        public int CompletedFrame        {            get            {                return completedFrame;            }            set            {                completedFrame = value;                if (CompletedFrame == MaxFrame)                {                    PlayersFrameButtonEnable = false;                }                else
                {
                    PlayersFrameButtonEnable = true;
                }                OnPropertyChanged();            }        }        private int playerOneFrame;        public int PlayerOneFrame        {            get            {                return playerOneFrame;            }            set            {                playerOneFrame = value;                OnPropertyChanged();            }        }        private int playerTwoFrame;        public int PlayerTwoFrame        {            get            {                return playerTwoFrame;            }            set            {                playerTwoFrame = value;                OnPropertyChanged();            }        }        private bool playersFrameButtonEnable = true;        public bool PlayersFrameButtonEnable        {            get            {                return playersFrameButtonEnable;            }            set            {                playersFrameButtonEnable = value;                OnPropertyChanged();            }        }        private bool matchFinished = false;        public bool MatchFinished        {            get            {                return matchFinished;            }            set            {                matchFinished = value;                OnPropertyChanged();            }        }        public ICommand PlayerOneFrameCommand { get => new Command(() => PlayerOneFrameCommandMethod()); }        public ICommand PlayerTwoFrameCommand { get => new Command(() => PlayerTwoFrameCommandMethod()); }        public ICommand UndoCommand { get => new Command(() => UndoCommandMethod()); }        public ScoreCardViewModel(PendingMatchResponse obj)        {            _progDialog = DependencyService.Get<IProgressDialog>();            _matchData = obj;        }        public async void InitData()        {            await GetPlayerDetails();        }        private async Task GetInitialPlayersFrame()
        {
            _progDialog.ShowProgress("Getting players frame.");
            PlayerOneFrame = await App.ServiceManager.GetPlayerFrame(PlayerOne.userId.ToString());
            PlayerTwoFrame = await App.ServiceManager.GetPlayerFrame(PlayerTwo.userId.ToString());
            _progDialog.HideProgress();
            CompletedFrame = PlayerOneFrame + PlayerTwoFrame;
        }        public Command FinishGameCommand => new Command(async () =>
        {
            var uid = Preferences.Get(Constants.UserID, String.Empty);
            _progDialog.ShowProgress("Finshing MTCH!");
            var success = await App.ServiceManager.FinishGame(uid, _matchData.matchId.ToString());
            _progDialog.HideProgress();
            if (success)
            {
                PlayersFrameButtonEnable = false;
                MatchFinished = true;
                var alertResult = await Application.Current.MainPage.DisplayAlert(Bird.Client.Mtchmkr.Business.Common.Constants.APP_NAME, "MTCH finished.", null, "OK");
                if (!alertResult)
                {
                    await Application.Current.MainPage.Navigation.PopAsync();
                }
            }            else
            {
                await App.Current.MainPage.DisplayAlert(Bird.Client.Mtchmkr.Business.Common.Constants.APP_NAME, "Failed finishing MTCH.", "OK");
            }        });        private async Task GetPlayerDetails()        {            _progDialog.ShowProgress("Loading...");            var res = await App.ServiceManager.GetMatchInfo(_matchData.matchId.ToString());            _progDialog.HideProgress();            if (res != null && res.Count >= 2)            {                PlayerOne.gameId = Guid.Empty;                PlayerOne.imageData = res[0].imageData;                PlayerOne.imageTitle = res[0].imageTitle;                PlayerOne.name = res[0].name;                PlayerOneName = res[0].name;                PlayerOne.Rating = res[0].rating;                PlayerOne.userId = Guid.Parse(res[0].userId);                PlayerOne.userName = res[0].userName;                PlayerOneFrame = res[0].frameWinCount;                PlayerTwo.gameId = Guid.Empty;                PlayerTwo.imageData = res[1].imageData;                PlayerTwo.imageTitle = res[1].imageTitle;                PlayerTwo.name = res[1].name;                PlayerTwoName = res[1].name;                PlayerTwo.Rating = res[1].rating;                PlayerTwo.userId = Guid.Parse(res[1].userId);                PlayerTwo.userName = res[1].userName;
                PlayerTwoFrame = res[1].frameWinCount;
                CompletedFrame = PlayerOneFrame + PlayerTwoFrame;                MaxFrame = res[1].MaxFrame;                if (CompletedFrame == MaxFrame)                {                    PlayersFrameButtonEnable = false;                }                else
                {
                    PlayersFrameButtonEnable = true;
                }            }            else            {                await App.Current.MainPage.DisplayAlert("MtchMkr", "Error getting MTCH details", "Ok");            }        }        async void PlayerOneFrameCommandMethod()        {            if ((PlayerOneFrame + PlayerTwoFrame) < MaxFrame)            {                _progDialog.ShowProgress("Loading...");                var res = await App.ServiceManager.PutFrameCount(_matchData.matchId.ToString(), PlayerOne.userId.ToString(), (PlayerOneFrame + PlayerTwoFrame + 1).ToString());
                _progDialog.HideProgress();                if (res)                {                    PlayerOneFrame++;                    CompletedFrame = PlayerOneFrame + PlayerTwoFrame;                    LastFrameUpdatePlayer = "ONE";                }                else                {                    await App.Current.MainPage.DisplayAlert("MtchMkr", "Error getting updating frame!", "Ok");                }                GetPlayerDetails();            }        }        async void PlayerTwoFrameCommandMethod()        {            if ((PlayerOneFrame + PlayerTwoFrame) < MaxFrame)            {                _progDialog.ShowProgress("Loading...");                var res = await App.ServiceManager.PutFrameCount(_matchData.matchId.ToString(), PlayerTwo.userId.ToString(), (PlayerOneFrame + PlayerTwoFrame + 1).ToString());                _progDialog.HideProgress();                if (res)                {                    PlayerTwoFrame++;                    CompletedFrame = PlayerOneFrame + PlayerTwoFrame;                    LastFrameUpdatePlayer = "TWO";                }                else                {                    await App.Current.MainPage.DisplayAlert("MtchMkr", "Error getting updating frame!", "Ok");                }                GetPlayerDetails();            }        }        async void UndoCommandMethod()        {            if (LastFrameUpdatePlayer == "ONE")            {                if (playerOneFrame == 0)                    return;                _progDialog.ShowProgress("Loading...");                var res = await App.ServiceManager.PutFrameCount(_matchData.matchId.ToString(), PlayerOne.userId.ToString(), (PlayerOneFrame - 1).ToString());                _progDialog.HideProgress();                if (res)                {                    PlayerOneFrame--;                }            }            else if (LastFrameUpdatePlayer == "TWO")            {                if (playerTwoFrame == 0)                    return;                _progDialog.ShowProgress("Loading...");                var res = await App.ServiceManager.PutFrameCount(_matchData.matchId.ToString(), PlayerTwo.userId.ToString(), (PlayerTwoFrame - 1).ToString());                _progDialog.HideProgress();                if (res)                {                    PlayerTwoFrame--;                }            }            else            {                await App.Current.MainPage.DisplayAlert("MtchMkr", "Last operation already undone", "Ok");            }            LastFrameUpdatePlayer = string.Empty;            CompletedFrame = PlayerOneFrame + PlayerTwoFrame;        }        string LastFrameUpdatePlayer = string.Empty;        public async void SearchPlayersMethod()        {            var matchIdString = Preferences.Get("MatchId", string.Empty);

            if (string.IsNullOrEmpty(matchIdString))            {                IsNoDataView = true;                IsScoreCardView = false;                return;            }            IsNoDataView = false;            IsScoreCardView = true;            var matchId = Guid.Parse(matchIdString);            _progDialog.ShowProgress("Loading...");

            var result = await App.ServiceManager.ScoreCardGetUserDetailsByMatchId(matchId);            if (result != null && result.Count > 0)            {                PlayersItemsSource = new ObservableCollection<PlayerDTO>(result);                PlayerOne = result.FirstOrDefault();                PlayerTwo = result.LastOrDefault();            }            else            {                await App.Current.MainPage.DisplayAlert(Constants.APP_NAME, "No Data Found", "Ok");            }            _progDialog.HideProgress();        }    }}